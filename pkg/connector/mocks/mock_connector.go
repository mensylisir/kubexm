// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/connector/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/connector/interface.go -destination=pkg/connector/mocks/mock_connector.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/mensylisir/kubexm/pkg/apis/kubexms/v1alpha1"
	connector "github.com/mensylisir/kubexm/pkg/connector"
	gomock "go.uber.org/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewLocalConnector mocks base method.
func (m *MockFactory) NewLocalConnector() connector.Connector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLocalConnector")
	ret0, _ := ret[0].(connector.Connector)
	return ret0
}

// NewLocalConnector indicates an expected call of NewLocalConnector.
func (mr *MockFactoryMockRecorder) NewLocalConnector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLocalConnector", reflect.TypeOf((*MockFactory)(nil).NewLocalConnector))
}

// NewSSHConnector mocks base method.
func (m *MockFactory) NewSSHConnector(pool *connector.ConnectionPool) connector.Connector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSSHConnector", pool)
	ret0, _ := ret[0].(connector.Connector)
	return ret0
}

// NewSSHConnector indicates an expected call of NewSSHConnector.
func (mr *MockFactoryMockRecorder) NewSSHConnector(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSSHConnector", reflect.TypeOf((*MockFactory)(nil).NewSSHConnector), pool)
}

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
	isgomock struct{}
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockConnector) Connect(ctx context.Context, cfg connector.ConnectionCfg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectorMockRecorder) Connect(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnector)(nil).Connect), ctx, cfg)
}

// CopyContent mocks base method.
func (m *MockConnector) CopyContent(ctx context.Context, content []byte, destPath string, options *connector.FileTransferOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContent", ctx, content, destPath, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyContent indicates an expected call of CopyContent.
func (mr *MockConnectorMockRecorder) CopyContent(ctx, content, destPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContent", reflect.TypeOf((*MockConnector)(nil).CopyContent), ctx, content, destPath, options)
}

// Exec mocks base method.
func (m *MockConnector) Exec(ctx context.Context, cmd string, opts *connector.ExecOptions) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, cmd, opts)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exec indicates an expected call of Exec.
func (mr *MockConnectorMockRecorder) Exec(ctx, cmd, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockConnector)(nil).Exec), ctx, cmd, opts)
}

// GetFileChecksum mocks base method.
func (m *MockConnector) GetFileChecksum(ctx context.Context, path, checksumType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileChecksum", ctx, path, checksumType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileChecksum indicates an expected call of GetFileChecksum.
func (mr *MockConnectorMockRecorder) GetFileChecksum(ctx, path, checksumType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileChecksum", reflect.TypeOf((*MockConnector)(nil).GetFileChecksum), ctx, path, checksumType)
}

// GetOS mocks base method.
func (m *MockConnector) GetOS(ctx context.Context) (*connector.OS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOS", ctx)
	ret0, _ := ret[0].(*connector.OS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOS indicates an expected call of GetOS.
func (mr *MockConnectorMockRecorder) GetOS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOS", reflect.TypeOf((*MockConnector)(nil).GetOS), ctx)
}

// IsConnected mocks base method.
func (m *MockConnector) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockConnectorMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockConnector)(nil).IsConnected))
}

// LookPath mocks base method.
func (m *MockConnector) LookPath(ctx context.Context, file string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookPath", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookPath indicates an expected call of LookPath.
func (mr *MockConnectorMockRecorder) LookPath(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookPath", reflect.TypeOf((*MockConnector)(nil).LookPath), ctx, file)
}

// Mkdir mocks base method.
func (m *MockConnector) Mkdir(ctx context.Context, path, perm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", ctx, path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockConnectorMockRecorder) Mkdir(ctx, path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockConnector)(nil).Mkdir), ctx, path, perm)
}

// ReadFile mocks base method.
func (m *MockConnector) ReadFile(ctx context.Context, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockConnectorMockRecorder) ReadFile(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockConnector)(nil).ReadFile), ctx, path)
}

// Remove mocks base method.
func (m *MockConnector) Remove(ctx context.Context, path string, opts connector.RemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, path, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockConnectorMockRecorder) Remove(ctx, path, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockConnector)(nil).Remove), ctx, path, opts)
}

// Stat mocks base method.
func (m *MockConnector) Stat(ctx context.Context, path string) (*connector.FileStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx, path)
	ret0, _ := ret[0].(*connector.FileStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockConnectorMockRecorder) Stat(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockConnector)(nil).Stat), ctx, path)
}

// WriteFile mocks base method.
func (m *MockConnector) WriteFile(ctx context.Context, content []byte, destPath string, options *connector.FileTransferOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, content, destPath, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockConnectorMockRecorder) WriteFile(ctx, content, destPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockConnector)(nil).WriteFile), ctx, content, destPath, options)
}

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
	isgomock struct{}
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockHost) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockHostMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockHost)(nil).GetAddress))
}

// GetArch mocks base method.
func (m *MockHost) GetArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetArch indicates an expected call of GetArch.
func (mr *MockHostMockRecorder) GetArch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArch", reflect.TypeOf((*MockHost)(nil).GetArch))
}

// GetHostSpec mocks base method.
func (m *MockHost) GetHostSpec() v1alpha1.HostSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSpec")
	ret0, _ := ret[0].(v1alpha1.HostSpec)
	return ret0
}

// GetHostSpec indicates an expected call of GetHostSpec.
func (mr *MockHostMockRecorder) GetHostSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSpec", reflect.TypeOf((*MockHost)(nil).GetHostSpec))
}

// GetName mocks base method.
func (m *MockHost) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockHostMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockHost)(nil).GetName))
}

// GetPort mocks base method.
func (m *MockHost) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockHostMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockHost)(nil).GetPort))
}

// GetRoles mocks base method.
func (m *MockHost) GetRoles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockHostMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockHost)(nil).GetRoles))
}

// GetUser mocks base method.
func (m *MockHost) GetUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockHostMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockHost)(nil).GetUser))
}
