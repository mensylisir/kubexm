// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	connector "github.com/mensylisir/kubexm/pkg/connector"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Connector) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx, cfg
func (_m *Connector) Connect(ctx context.Context, cfg connector.ConnectionCfg) error {
	ret := _m.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, connector.ConnectionCfg) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyContent provides a mock function with given fields: ctx, content, destPath, options
func (_m *Connector) CopyContent(ctx context.Context, content []byte, destPath string, options *connector.FileTransferOptions) error {
	ret := _m.Called(ctx, content, destPath, options)

	if len(ret) == 0 {
		panic("no return value specified for CopyContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, *connector.FileTransferOptions) error); ok {
		r0 = rf(ctx, content, destPath, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, cmd, opts
func (_m *Connector) Exec(ctx context.Context, cmd string, opts *connector.ExecOptions) ([]byte, []byte, error) {
	ret := _m.Called(ctx, cmd, opts)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *connector.ExecOptions) ([]byte, []byte, error)); ok {
		return rf(ctx, cmd, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *connector.ExecOptions) []byte); ok {
		r0 = rf(ctx, cmd, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *connector.ExecOptions) []byte); ok {
		r1 = rf(ctx, cmd, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *connector.ExecOptions) error); ok {
		r2 = rf(ctx, cmd, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFileChecksum provides a mock function with given fields: ctx, path, checksumType
func (_m *Connector) GetFileChecksum(ctx context.Context, path string, checksumType string) (string, error) {
	ret := _m.Called(ctx, path, checksumType)

	if len(ret) == 0 {
		panic("no return value specified for GetFileChecksum")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, path, checksumType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, path, checksumType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, checksumType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOS provides a mock function with given fields: ctx
func (_m *Connector) GetOS(ctx context.Context) (*connector.OS, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOS")
	}

	var r0 *connector.OS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*connector.OS, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *connector.OS); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.OS)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsConnected provides a mock function with no fields
func (_m *Connector) IsConnected() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LookPath provides a mock function with given fields: ctx, file
func (_m *Connector) LookPath(ctx context.Context, file string) (string, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for LookPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mkdir provides a mock function with given fields: ctx, path, perm
func (_m *Connector) Mkdir(ctx context.Context, path string, perm string) error {
	ret := _m.Called(ctx, path, perm)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFile provides a mock function with given fields: ctx, path
func (_m *Connector) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, path, opts
func (_m *Connector) Remove(ctx context.Context, path string, opts connector.RemoveOptions) error {
	ret := _m.Called(ctx, path, opts)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, connector.RemoveOptions) error); ok {
		r0 = rf(ctx, path, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: ctx, path
func (_m *Connector) Stat(ctx context.Context, path string) (*connector.FileStat, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *connector.FileStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*connector.FileStat, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *connector.FileStat); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.FileStat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: ctx, content, destPath, options
func (_m *Connector) WriteFile(ctx context.Context, content []byte, destPath string, options *connector.FileTransferOptions) error {
	ret := _m.Called(ctx, content, destPath, options)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, *connector.FileTransferOptions) error); ok {
		r0 = rf(ctx, content, destPath, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
