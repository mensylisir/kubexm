package kubexm

import (
	"fmt"
	"time"

	"github.com/mensylisir/kubexm/pkg/common"
	"github.com/mensylisir/kubexm/pkg/runtime"
	"github.com/mensylisir/kubexm/pkg/spec"
	"github.com/mensylisir/kubexm/pkg/step"
)

type BackupKubeconfigsStep struct {
	step.Base
	remoteDirToBackup string
	remoteBackupDir   string
}

type BackupKubeconfigsStepBuilder struct {
	step.Builder[BackupKubeconfigsStepBuilder, *BackupKubeconfigsStep]
}

func NewBackupKubeconfigsStepBuilder(ctx runtime.Context, instanceName string) *BackupKubeconfigsStepBuilder {
	remoteDir := common.KubernetesConfigDir
	backupDir := fmt.Sprintf("%s.%s-%d", remoteDir, "kubexm-backup-kubeconfigs", time.Now().Unix())

	s := &BackupKubeconfigsStep{
		remoteDirToBackup: remoteDir,
		remoteBackupDir:   backupDir,
	}
	s.Base.Meta.Name = instanceName
	s.Base.Meta.Description = fmt.Sprintf("Back up remote kubeconfig directory '%s' on the node", remoteDir)
	s.Base.Sudo = false
	s.Base.IgnoreError = false
	s.Base.Timeout = 2 * time.Minute

	b := new(BackupKubeconfigsStepBuilder).Init(s)
	return b
}

func (s *BackupKubeconfigsStep) Meta() *spec.StepMeta {
	return &s.Base.Meta
}

func (s *BackupKubeconfigsStep) Precheck(ctx runtime.ExecutionContext) (isDone bool, err error) {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Precheck")

	if _, ok := ctx.GetTaskCache().Get(common.CacheKubeconfigsBackupPath); ok {
		logger.Info("Remote kubeconfig directory has already been backed up in this task execution. Step is done.")
		return true, nil
	}

	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		return false, err
	}
	checkCmd := fmt.Sprintf("[ -d %s ]", s.remoteDirToBackup)
	if _, err := ctx.GetRunner().Run(ctx.GoContext(), conn, checkCmd, s.Sudo); err != nil {
		return false, fmt.Errorf("precheck failed: source directory '%s' not found on host '%s'", s.remoteDirToBackup, ctx.GetHost().GetName())
	}

	logger.Info("Precheck passed: source directory exists and no backup has been made for this task yet.")
	return false, nil
}

func (s *BackupKubeconfigsStep) Run(ctx runtime.ExecutionContext) error {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Run")
	runner := ctx.GetRunner()
	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		return err
	}

	logger.Infof("Backing up remote directory from '%s' to '%s'...", s.remoteDirToBackup, s.remoteBackupDir)
	backupCmd := fmt.Sprintf("cp -a %s %s", s.remoteDirToBackup, s.remoteBackupDir)
	if _, err := runner.Run(ctx.GoContext(), conn, backupCmd, s.Sudo); err != nil {
		return fmt.Errorf("failed to back up remote directory on host '%s': %w", ctx.GetHost().GetName(), err)
	}

	ctx.GetTaskCache().Set(common.CacheKubeconfigsBackupPath, s.remoteBackupDir)
	logger.Infof("Successfully backed up directory. Backup path '%s' saved to cache.", s.remoteBackupDir)

	return nil
}

func (s *BackupKubeconfigsStep) Rollback(ctx runtime.ExecutionContext) error {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Rollback")

	backupPath, ok := ctx.GetTaskCache().Get(common.CacheKubeconfigsBackupPath)
	if !ok {
		logger.Warn("No backup path found in cache for this task execution. Assuming Run did not complete, nothing to roll back.")
		return nil
	}

	backupDir, ok := backupPath.(string)
	if !ok || backupDir == "" {
		logger.Error("Backup path in cache is not a valid string. Cannot proceed with cleanup.", "value", backupPath)
		return nil
	}

	if backupDir != s.remoteBackupDir {
		logger.Errorf("CRITICAL: Backup path from cache ('%s') does not match the path generated by this step ('%s'). Aborting rollback to prevent accidental deletion.", backupDir, s.remoteBackupDir)
		return fmt.Errorf("backup path mismatch, aborting rollback")
	}

	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		logger.Errorf("CRITICAL: Cannot connect to host '%s' for rollback. The backup directory '%s' may need manual cleanup. Error: %v", ctx.GetHost().GetName(), backupDir, err)
		return err
	}

	logger.Warnf("Rolling back by removing the created backup directory '%s'...", backupDir)

	cleanupCmd := fmt.Sprintf("rm -rf %s", backupDir)
	if _, err := ctx.GetRunner().Run(ctx.GoContext(), conn, cleanupCmd, s.Sudo); err != nil {
		logger.Errorf("Failed to remove backup directory '%s' during rollback. Manual cleanup may be needed on host '%s'. Error: %v", backupDir, ctx.GetHost().GetName(), err)
	}

	ctx.GetTaskCache().Delete(common.CacheKubeconfigsBackupPath)

	logger.Info("Rollback of backup step completed: temporary backup directory removed.")
	return nil
}

var _ step.Step = (*BackupKubeconfigsStep)(nil)
