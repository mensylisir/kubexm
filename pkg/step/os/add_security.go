package os

import (
	"fmt"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/mensylisir/kubexm/pkg/common"
	"github.com/mensylisir/kubexm/pkg/runtime"
	"github.com/mensylisir/kubexm/pkg/spec"
	"github.com/mensylisir/kubexm/pkg/step"
	"github.com/pkg/errors"
)

type ConfigureSecurityLimitsStep struct {
	step.Base
	configFileCreated bool
}

type ConfigureSecurityLimitsStepBuilder struct {
	step.Builder[ConfigureSecurityLimitsStepBuilder, *ConfigureSecurityLimitsStep]
}

func NewConfigureSecurityLimitsStepBuilder(ctx runtime.Context, instanceName string) *ConfigureSecurityLimitsStepBuilder {
	s := &ConfigureSecurityLimitsStep{}

	s.Base.Meta.Name = instanceName
	s.Base.Meta.Description = fmt.Sprintf("[%s] >> Configure security limits (ulimit)", s.Base.Meta.Name)
	s.Base.Sudo = false
	s.Base.IgnoreError = false
	s.Base.Timeout = 2 * time.Minute

	b := new(ConfigureSecurityLimitsStepBuilder).Init(s)
	return b
}

func (s *ConfigureSecurityLimitsStep) Meta() *spec.StepMeta {
	return &s.Base.Meta
}

func (s *ConfigureSecurityLimitsStep) generateExpectedContent(ctx runtime.ExecutionContext) (string, error) {
	limits := map[string]string{
		"* soft nofile": "1048576",
		"* hard nofile": "1048576",
		"* soft nproc":  "65536",
		"* hard nproc":  "65536",
	}

	var keys []string
	for k := range limits {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	var builder strings.Builder
	builder.WriteString("# Generated by KubeXM for Kubernetes prerequisites\n")
	for _, key := range keys {
		builder.WriteString(fmt.Sprintf("%-20s %s\n", key, limits[key]))
	}

	return builder.String(), nil
}

func (s *ConfigureSecurityLimitsStep) getLimitsConfFilePath() string {
	return common.SecuriryLimitsDefaultFile
}

func (s *ConfigureSecurityLimitsStep) Precheck(ctx runtime.ExecutionContext) (isDone bool, err error) {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Precheck")
	runner := ctx.GetRunner()
	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		return false, err
	}

	expectedContent, err := s.generateExpectedContent(ctx)
	if err != nil {
		return false, errors.Wrap(err, "failed to generate expected security limits config")
	}

	filePath := s.getLimitsConfFilePath()
	currentContentBytes, err := runner.ReadFile(ctx.GoContext(), conn, filePath)
	if err != nil {
		if os.IsNotExist(err) || strings.Contains(err.Error(), "No such file or directory") {
			logger.Infof("Security limits config file '%s' not found, needs to be created.", filePath)
			return false, nil
		}
		return false, errors.Wrapf(err, "failed to read security limits config file '%s'", filePath)
	}

	if strings.TrimSpace(string(currentContentBytes)) == strings.TrimSpace(expectedContent) {
		logger.Infof("Security limits config '%s' is already up-to-date.", filePath)
		return true, nil
	}

	logger.Infof("Security limits config '%s' needs to be updated.", filePath)
	return false, nil
}

func (s *ConfigureSecurityLimitsStep) Run(ctx runtime.ExecutionContext) error {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Run")
	runner := ctx.GetRunner()
	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		return err
	}

	filePath := s.getLimitsConfFilePath()

	fileExists, err := runner.Exists(ctx.GoContext(), conn, filePath)
	if err != nil {
		return errors.Wrapf(err, "failed to check for existence of '%s'", filePath)
	}
	s.configFileCreated = !fileExists

	content, err := s.generateExpectedContent(ctx)
	if err != nil {
		return err
	}

	logger.Infof("Writing security limits configuration to '%s'...", filePath)
	permissions := fmt.Sprintf("0%o", common.DefaultConfigFilePermission)
	err = runner.WriteFile(ctx.GoContext(), conn, []byte(content), filePath, permissions, s.Sudo)
	if err != nil {
		return errors.Wrapf(err, "failed to write security limits config file '%s'", filePath)
	}

	logger.Info("Security limits configuration applied. Changes will take effect on the next user login.")
	return nil
}

func (s *ConfigureSecurityLimitsStep) Rollback(ctx runtime.ExecutionContext) error {
	logger := ctx.GetLogger().With("step", s.Base.Meta.Name, "host", ctx.GetHost().GetName(), "phase", "Rollback")
	runner := ctx.GetRunner()
	conn, err := ctx.GetCurrentHostConnector()
	if err != nil {
		return err
	}

	if s.configFileCreated {
		filePath := s.getLimitsConfFilePath()
		logger.Infof("Rolling back by removing security limits config file '%s'...", filePath)

		if err := runner.Remove(ctx.GoContext(), conn, filePath, s.Sudo, false); err != nil {
			return errors.Wrapf(err, "failed to remove security limits config file '%s' during rollback", filePath)
		}

		logger.Infof("Security limits configuration rolled back.")
	} else {
		logger.Info("Skipping rollback as the security limits config file existed before this step.")
	}

	return nil
}
