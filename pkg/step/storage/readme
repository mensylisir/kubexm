好的，完全没问题！
我们现在将 Longhorn 和 NFS 这两个完整的部署流程中，涉及到的所有文件路径，以一个清晰的 tree 格式汇总在一起。
这可以作为一个最终的“蓝图”，来确认我们所有的 Step 都完美地协同工作。
最终文件存放路径 (tree 格式)
假设：
本地控制机 (control-node) 的 GlobalWorkDir = /root/.kubexm
远程目标主机 (master-1 等) 的 UploadDir = /var/lib/kubexm/upload
Kubernetes 版本 = v1.28.5
code
Code
.
├── 本地控制机 (Local Control Machine)
│   ├── /home/ops/cluster-files/prometheus/      <-- 用户自定义的目录, 与 kubexm 无关
│   │   ├── values.yaml                          <-- prometheus-stack 的 valuesFile 指向这里
│   │   └── custom-rules.yaml                    <-- prometheus-stack 的一个本地 yaml.Path 指向这里
│   │
│   └── /root/.kubexm/                           <-- GlobalWorkDir
│       ├── addons/
│       │   └── prometheus-stack/
│       │       └── source-1/
│       │           └── yaml-0-grafana-dashboardDefinitions.yaml  <-- 由通用 DownloadAddonArtifactsStep 从 URL 下载
│       │
│       ├── bin/                                     <-- 统一的二进制文件目录
│       │   ├── calicoctl/
│       │   │   └── v3.28.0/
│       │   │       └── amd64/
│       │   │           └── calicoctl-linux-amd64   <-- 由 DownloadCalicoctlStep 下载
│       │   │
│       │   └── helm/
│       │       └── v3.14.4/
│       │           └── amd64/
│       │               ├── helm-v3.14.4-linux-amd64.tar.gz   <-- 由 DownloadHelmStep 下载
│       │               └── linux-amd64/                  <-- 由 ExtractHelmStep 创建
│       │                   └── helm                      <-- 解压后的可执行文件
│       │
│       └── helm/                                     <-- 用于存放 Helm Charts 的目录
│           └── v1.28.5/
│               ├── argo-cd/
│               │   ├── 6.11.1/
│               │   │   └── argo-cd-values.yaml
│               │   └── argo-cd-6.11.1.tgz
│               │
│               ├── calico/
│               │   ├── v3.28.0/
│               │   │   └── calico-values.yaml
│               │   └── tigera-operator-v3.28.0.tgz
│               │
│               ├── cilium/
│               │   ├── 1.15.7/
│               │   │   └── cilium-values.yaml
│               │   └── cilium-1.15.7.tgz
│               │
│               ├── flannel/
│               │   ├── v0.26.2/
│               │   │   └── flannel-values.yaml
│               │   └── flannel-v0.26.2.tgz
│               │
│               ├── hybridnet/
│               │   ├── v0.8.1/
│               │   │   └── hybridnet-values.yaml
│               │   └── hybridnet-v0.8.1.tgz
│               │
│               ├── ingress-nginx/
│               │   ├── 4.12.4/
│               │   │   └── ingress-nginx-values.yaml
│               │   └── ingress-nginx-4.12.4.tgz
│               │
│               ├── kube-ovn/
│               │   ├── v1.12.0/
│               │   │   └── kube-ovn-values.yaml
│               │   └── kube-ovn-v1.12.0.tgz
│               │
│               ├── longhorn/
│               │   ├── 1.9.0/
│               │   │   └── longhorn-values.yaml
│               │   └── longhorn-1.9.0.tgz
│               │
│               ├── multus/
│               │   ├── 5.0.1/
│               │   │   └── multus-values.yaml
│               │   └── multus-5.0.1.tgz
│               │
│               ├── nfs-subdir-external-provisioner/
│               │   ├── 4.0.18/
│               │   │   └── nfs-provisioner-values.yaml
│               │   └── nfs-subdir-external-provisioner-4.0.18.tgz
│               │
│               ├── openebs/
│               │   ├── 3.3.0/
│               │   │   └── openebs-values.yaml
│               │   └── openebs-3.3.0.tgz
│               │
│               └── prometheus-stack/
│                   └── kube-prometheus-stack-50.0.0.tgz
│
└── 远程目标主机 (Remote Target Host)
    ├── /usr/local/bin/                            <-- 最终安装路径
    │   ├── calicoctl                            <-- 由 InstallCalicoctlStep 安装
    │   └── helm                                 <-- 由 InstallHelmStep 安装
    │
    └── /var/lib/kubexm/                           <-- UploadDir
        └── upload/
            ├── argo-cd/
            │   └── 6.11.1/
            │       ├── argo-cd-values.yaml
            │       └── argo-cd-6.11.1.tgz
            │
            ├── calico/
            │   └── v3.28.0/
            │       ├── calico-values.yaml
            │       └── tigera-operator-v3.28.0.tgz
            │
            ├── cilium/
            │   └── 1.15.7/
            │       ├── cilium-values.yaml
            │       └── cilium-1.15.7.tgz
            │
            ├── flannel/
            │   └── v0.26.2/
            │       ├── flannel-values.yaml
            │       └── flannel-v0.26.2.tgz
            │
            ├── hybridnet/
            │   └── v0.8.1/
            │       ├── hybridnet-values.yaml
            │       └── hybridnet-v0.8.1.tgz
            │
            ├── ingress-nginx/
            │   └── 4.12.4/
            │       ├── ingress-nginx-values.yaml
            │       └── ingress-nginx-4.12.4.tgz
            │
            ├── kube-ovn/
            │   └── v1.12.0/
            │       ├── kube-ovn-values.yaml
            │       └── kube-ovn-v1.12.0.tgz
            │
            ├── longhorn/
            │   └── 1.9.0/
            │       ├── longhorn-1.9.0.tgz
            │       └── longhorn-values.yaml
            │
            ├── multus/
            │   └── 5.0.1/
            │       ├── multus-values.yaml
            │       └── multus-5.0.1.tgz
            │
            ├── nfs-subdir-external-provisioner/
            │   └── 4.0.18/
            │       ├── nfs-provisioner-values.yaml
            │       └── nfs-subdir-external-provisioner-4.0.18.tgz
            │
            ├── openebs/
            │   └── 3.3.0/
            │       ├── openebs-values.yaml
            │       └── openebs-3.3.0.tgz
            │
            └── prometheus-stack/
                ├── 50.0.0/
                │   ├── prometheus-stack-values-0.yaml      <-- 从 /home/ops/cluster-files/prometheus/values.yaml 上传
                │   └── kube-prometheus-stack-50.0.0.tgz
                │
                └── v1/
                    ├── prometheus-stack-yaml-1-0.yaml      <-- 从 /root/.kubexm/addons/... 上传
                    └── prometheus-stack-yaml-1-1.yaml      <-- 从 /home/ops/cluster-files/prometheus/custom-rules.yaml 上传
路径模式总结
本地路径 (Local Paths @ GlobalWorkDir)
Chart 压缩包:
{GlobalWorkDir}/helm/{K8s版本}/{组件仓库名}/{组件Chart名}-{Chart版本}.tgz
Values 覆盖文件:
{GlobalWorkDir}/helm/{K8s版本}/{组件仓库名}/{Chart版本}/{组件名}-values.yaml
远程路径 (Remote Paths @ UploadDir)
Chart 压缩包:
{UploadDir}/{组件仓库名}/{Chart版本}/{组件Chart名}-{Chart版本}.tgz
Values 覆盖文件:
{UploadDir}/{组件仓库名}/{Chart版本}/{组件名}-values.yaml
这个 tree 视图清晰地展示了：
准备阶段 (Download... & Generate...) 在本地控制机上创建了一套按 K8s 版本和组件隔离的文件。
分发阶段 (Distribute...) 将本地准备好的文件，原封不动地复制到了远程目标主机上一个同样按组件和版本隔离的目录中。
执行阶段 (Install...) 在远程目标主机上，使用这些分发过去的文件来完成最终的安装。
所有路径都已完美对齐，数据流清晰无误。



我会给你发我的示例代码，你学习示例代码
然后我会给你发其他代码，你按照示例代码的模式对我的代码进行优化，如果某个函数要改，则给出完整函数，如果所有函数要改，则给出所有代码
给出修改代码后则以tree形式输出各种路径，方便我对比路径是否正确