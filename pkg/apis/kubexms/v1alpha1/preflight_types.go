package v1alpha1

// Assuming ValidationErrors is in cluster_types.go or a shared util in this package

// PreflightConfig holds configuration for preflight checks.
type PreflightConfig struct {
	MinCPUCores *int32  `json:"minCPUCores,omitempty" yaml:"minCPUCores,omitempty"`
	MinMemoryMB *uint64 `json:"minMemoryMB,omitempty" yaml:"minMemoryMB,omitempty"`
	DisableSwap *bool   `json:"disableSwap,omitempty" yaml:"disableSwap,omitempty"`
	// SkipChecks []string `json:"skipChecks,omitempty" yaml:"skipChecks,omitempty"` // Suggested improvement
}

// SetDefaults_PreflightConfig sets default values for PreflightConfig.
func SetDefaults_PreflightConfig(cfg *PreflightConfig) {
	if cfg == nil {
		return
	}
	if cfg.DisableSwap == nil {
		b := true
		cfg.DisableSwap = &b
	}
	// Defaults for MinCPUCores and MinMemoryMB can be added if desired
	// e.g., if cfg.MinCPUCores == nil { defaultCPU := int32(2); cfg.MinCPUCores = &defaultCPU }
}

// Validate_PreflightConfig validates PreflightConfig.
func Validate_PreflightConfig(cfg *PreflightConfig, verrs *ValidationErrors, pathPrefix string) {
	if cfg == nil {
		return
	}
	if cfg.MinCPUCores != nil && *cfg.MinCPUCores <= 0 {
		verrs.Add("%s.minCPUCores: must be positive if specified, got %d", pathPrefix, *cfg.MinCPUCores)
	}
	if cfg.MinMemoryMB != nil && *cfg.MinMemoryMB == 0 { // Memory should be positive, allow 0 if it means "no check" or use a very small min.
		// For MinMemoryMB, 0 could be a valid "don't care" or "use system minimum".
		// If it must be positive, then *cfg.MinMemoryMB <= 0.
		// Based on typical usage, a minimum > 0 is expected.
		verrs.Add("%s.minMemoryMB: must be positive if specified, got %d", pathPrefix, *cfg.MinMemoryMB)
	}
	// No specific validation for DisableSwap (*bool) other than type.
	// If SkipChecks were added, validate that check names are known.
}
// NOTE: DeepCopy methods should be generated by controller-gen.
// Updated MinMemoryMB validation to ensure it's positive if set.
// Clarified default setting for MinCPUCores/MinMemoryMB.
// Removed suggested `SkipChecks` for now to match the immediate doc structure.
