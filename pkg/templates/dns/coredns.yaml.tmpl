# templates/dns/coredns.yaml.tmpl

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    labels:
        kubernetes.io/bootstrapping: rbac-defaults
        addonmanager.kubernetes.io/mode: Reconcile
    name: system:coredns
rules:
    - apiGroups:
          - ""
      resources:
          - endpoints
          - services
          - pods
          - namespaces
      verbs:
          - list
          - watch
    - apiGroups:
          - ""
      resources:
          - nodes
      verbs:
          - get
    - apiGroups:
          - discovery.k8s.io
      resources:
          - endpointslices
      verbs:
          - list
          - watch

---
apiVersion: v1
kind: Service
metadata:
    name: coredns
    namespace: kube-system
    labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "CoreDNS"
        addonmanager.kubernetes.io/mode: Reconcile
    annotations:
        prometheus.io/port: "9153"
        prometheus.io/scrape: "true"
spec:
    selector:
        k8s-app: kube-dns
    clusterIP: {{ .ClusterIP }}
    ports:
        - name: dns
          port: 53
          protocol: UDP
        - name: dns-tcp
          port: 53
          protocol: TCP
        - name: metrics
          port: 9153
          protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: coredns
    namespace: kube-system
    labels:
        kubernetes.io/cluster-service: "true"
        addonmanager.kubernetes.io/mode: Reconcile

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: system:coredns
    labels:
        kubernetes.io/bootstrapping: rbac-defaults
        addonmanager.kubernetes.io/mode: Reconcile
subjects:
    - kind: ServiceAccount
      name: coredns
      namespace: kube-system
roleRef:
    kind: ClusterRole
    name: system:coredns
    apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
    name: coredns
    namespace: kube-system
    labels:
        addonmanager.kubernetes.io/mode: Reconcile
data:
    # Corefile 将由另一个专门的模板生成
    Corefile: |
  {{ .Corefile | indent 4 }}
  {{- if .DNSEtcHosts }}
hosts: |
  {{ .DNSEtcHosts | indent 4 }}
  {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: "coredns"
    namespace: kube-system
    labels:
        k8s-app: "kube-dns"
        addonmanager.kubernetes.io/mode: Reconcile
        kubernetes.io/name: "coredns"
spec:
    replicas: {{ .Replicas }}
    strategy:
        type: RollingUpdate
        rollingUpdate:
            maxUnavailable: 1 # 推荐使用 1 而不是 0，以允许平滑滚动
    selector:
        matchLabels:
            k8s-app: kube-dns
    template:
        metadata:
            labels:
                k8s-app: kube-dns
        spec:
            securityContext:
                seccompProfile:
                    type: RuntimeDefault
            priorityClassName: system-cluster-critical
            serviceAccountName: coredns
            nodeSelector:
                kubernetes.io/os: linux
            tolerations:
                - key: "CriticalAddonsOnly"
                  operator: "Exists"
                - key: node-role.kubernetes.io/control-plane
                  effect: NoSchedule
                - key: node-role.kubernetes.io/master
                  effect: NoSchedule
            affinity:
                podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                        - weight: 100
                          podAffinityTerm:
                              labelSelector:
                                  matchLabels:
                                      k8s-app: kube-dns
                              topologyKey: "kubernetes.io/hostname"
            containers:
                - name: coredns
                  image: "{{ .Image }}"
                  imagePullPolicy: IfNotPresent
                  resources:
                      limits:
                          memory: 300Mi
                      requests:
                          cpu: 100m
                          memory: 70Mi
                  args: [ "-conf", "/etc/coredns/Corefile" ]
                  volumeMounts:
                      - name: config-volume
                        mountPath: /etc/coredns
                  ports:
                      - containerPort: 53
                        name: dns
                        protocol: UDP
                      - containerPort: 53
                        name: dns-tcp
                        protocol: TCP
                      - containerPort: 9153
                        name: metrics
                        protocol: TCP
                  securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                          add:
                              - NET_BIND_SERVICE
                          drop:
                              - all
                      readOnlyRootFilesystem: true
                  livenessProbe:
                      httpGet:
                          path: /health
                          port: 8080
                          scheme: HTTP
                      timeoutSeconds: 5
                      successThreshold: 1
                      failureThreshold: 5
                  readinessProbe:
                      httpGet:
                          path: /ready
                          port: 8181
                          scheme: HTTP
                      timeoutSeconds: 1
                      successThreshold: 1
                      failureThreshold: 5
            dnsPolicy: Default
            volumes:
                - name: config-volume
                  configMap:
                      name: coredns
                      items:
                          - key: Corefile
                            path: Corefile
  {{- if .DNSEtcHosts }}
- key: hosts
  path: hosts
  {{- end }}