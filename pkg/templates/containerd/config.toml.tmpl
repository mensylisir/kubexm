# KubeXM generated containerd config file
version = 2
root = "{{ .Root }}"
state = "{{ .State }}"
oom_score = -999

[grpc]
  address = "{{ .Grpc.Address }}"
  uid = 0
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216

[cgroup]
  path = ""

[metrics]
  address = ""
  grpc_histogram = false

[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
    sandbox_image = "{{ .SandboxImage }}"
    [plugins."io.containerd.grpc.v1.cri".containerd]
      snapshotter = "overlayfs"
      default_runtime_name = "runc"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = {{ .SystemdCgroup }}
    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "{{ .Cni.BinDir }}"
      conf_dir = "{{ .Cni.ConfDir }}"
      conf_template = ""
{{- /* 渲染镜像和认证配置 */}}
{{- range $registry, $config := .RegistryConfigs }}
    [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ $registry }}"]
    {{- if $config.Auth }}
      [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ $registry }}".auth]
        {{- if $config.Auth.Username }}
        username = "{{ $config.Auth.Username }}"
        {{- end }}
        {{- if $config.Auth.Password }}
        password = "{{ $config.Auth.Password }}"
        {{- end }}
        {{- if $config.Auth.Auth }}
        auth = "{{ $config.Auth.Auth }}"
        {{- end }}
        {{- if $config.Auth.IdentityToken }}
        identity_token = "{{ $config.Auth.IdentityToken }}"
        {{- end }}
    {{- end }}
    {{- if $config.TLS }}
      [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ $registry }}".tls]
        insecure_skip_verify = {{ $config.TLS.InsecureSkipVerify }}
        {{- if $config.TLS.CAFile }}
        ca_file = "{{ $config.TLS.CAFile }}"
        {{- end }}
        {{- if $config.TLS.CertFile }}
        cert_file = "{{ $config.TLS.CertFile }}"
        {{- end }}
        {{- if $config.TLS.KeyFile }}
        key_file = "{{ $config.TLS.KeyFile }}"
        {{- end }}
    {{- end }}
{{- end }}
{{- /* 渲染镜像 mirror 配置 */}}
{{- range $registry, $config := .RegistryMirrors }}
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ $registry }}"]
      endpoint = [{{ range $i, $endpoint := $config.Endpoints }}{{ if $i }}, {{ end }}"{{ $endpoint }}"{{ end }}]
{{- end }}